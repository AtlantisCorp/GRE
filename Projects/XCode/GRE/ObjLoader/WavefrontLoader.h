//
//  WavefrontLoader.h
//  GRE
//
//  Created by Jacques Tronconi on 26/09/2016.
//
//

#ifndef WavefrontLoader_h
#define WavefrontLoader_h

#include "Pools.h"
#include "Mesh.h"

//////////////////////////////////////////////////////////////////////
/// @brief Loads a Wavefront OBJ Model format into SoftwareBuffers for
/// newly created Mesh object. Please notes the Mesh object should be then
/// loaded by the Renderer to create specific HardwareBuffers.
//////////////////////////////////////////////////////////////////////
class WavefrontLoader : public Gre::MeshLoader
{
public:
    
    POOLED(Gre::Pools::Loader)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WavefrontLoader ();
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    ~WavefrontLoader ();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Loads a Mesh from given file.
    /// This function should always be provided in order to generically loads
    /// a Mesh from a given file.
    //////////////////////////////////////////////////////////////////////
    Gre::MeshHolder load ( const std::string& name , const std::string& filepath ) const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if the file given is loadable by this loader.
    //////////////////////////////////////////////////////////////////////
    bool isLoadable( const std::string& filepath ) const;
    
    ////////////////////////////////////////////////////////////////////////
    /// @brief Returns a clone of this object.
    /// Typically, this function is implemented as 'return new MyLoaderClass();',
    /// but you are free to do whatever you want.
    ////////////////////////////////////////////////////////////////////////
    Gre::ResourceLoader* clone() const;
    
private:
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Internal method to load Ascii Wavefront files.
    //////////////////////////////////////////////////////////////////////
    Gre::MeshHolder iLoadAsciiWavefront ( const std::string& name , const std::string& filepath ) const;
};

#endif /* WavefrontLoader_h */
