////////////////////////////////////////////////////
//  File    : ResourceUser.cpp
//  Project : GRE
//
//  Created by Jacques Tronconi on 02/05/2016.
//  
//
////////////////////////////////////////////////////

#include "ResourceUser.h"

GreBeginNamespace

ResourceUser::ResourceUser(Resource* resource)
{
    iResource = resource;
    iCounter = nullptr;
    
    if(iResource)
    {
        iCounter = iResource->getReferenceCounter();
        iCounter->use();
    }
}

ResourceUser::ResourceUser(ResourceHolder& holder)
{
    iResource = holder.get();
    iCounter = nullptr;
    
    if(iResource)
    {
        iCounter = iResource->getReferenceCounter();
        iCounter->use();
    }
}

ResourceUser::ResourceUser(const ResourceUser& user)
{
    iResource = user.iResource;
    iCounter = nullptr;
    
    if(iResource)
    {
        iCounter = iResource->getReferenceCounter();
        iCounter->use();
    }
}

ResourceUser::~ResourceUser() noexcept(false)
{
    if(iCounter)
    {
        iCounter->unuse();
        
        if(iCounter->getUserCount() == 0)
        {
            delete iCounter;
            iCounter = nullptr;
        }
    }
}

ResourceHolder ResourceUser::lock()
{
    return ResourceHolder(iResource);
}

const ResourceHolder ResourceUser::lock() const
{
    return ResourceHolder(iResource);
}

bool ResourceUser::isExpired() const
{
    if(iCounter)
    {
        return iCounter->getHolderCount() <= 0;
    }
    
    else
    {
        return true;
    }
}

ResourceUser::operator bool

const std::string& ResourceUser::getName() const
{
    auto ptr = lock();
    if(ptr) {
        return ptr->getName();
    }
    return "";
}

const Resource::Type& ResourceUser::getType() const
{
    auto ptr = lock();
    if(ptr)
        return ptr->getType();
    return Resource::Type::Null;
}

void ResourceUser::addAction(Gre::EventType etype, std::function<void (const Event &)> eaction)
{
    auto ptr = lock();
    if(ptr)
        ptr->addAction(etype, eaction);
}

void ResourceUser::resetActions()
{
    auto ptr = lock();
    if(ptr)
        ptr->resetActions();
}

void ResourceUser::onEvent(const Gre::Event &e)
{
    auto ptr = lock();
    if(ptr)
        ptr->onEvent(e);
}

ResourceUser& ResourceUser::addListener(const std::string &name)
{
    auto ptr = lock();
    if(ptr)
        return ptr->addListener(name);
    return ResourceUser::Null;
}

ResourceUser& ResourceUser::addListener(const ResourceUser &listener)
{
    auto ptr = lock();
    if(ptr)
        return ptr->addListener(listener);
    return ResourceUser::Null;
}

ResourceUser ResourceUser::getListener(const std::string &name)
{
    auto ptr = lock();
    if(ptr)
        return ptr->getListener(name);
    return ResourceUser::Null;
}

void ResourceUser::removeListener(const std::string &name)
{
    auto ptr = lock();
    if(ptr)
        ptr->removeListener(name);
}

void ResourceUser::sendEvent(const Event &e)
{
    auto ptr = lock();
    if(ptr)
        ptr->sendEvent(e);
}

void ResourceUser::setShouldTransmitEvents(bool p)
{
    auto ptr = lock();
    if(ptr)
        ptr->setShouldTransmitEvents(p);
}

bool ResourceUser::shouldTransmitEvents() const
{
    auto ptr = lock();
    if(ptr)
        return ptr->shouldTransmitEvents();
    return false;
}

void ResourceUser::acquire()
{
    auto ptr = lock();
    if(ptr)
        ptr->acquire();
}

void ResourceUser::release()
{
    auto ptr = lock();
    if(ptr)
        ptr->release();
}

int ResourceUser::getCounterValue() const
{
    auto ptr = lock();
    if(ptr)
        return ptr->getCounterValue();
    return 0;
}

ReferenceCounter* ResourceUser::getReferenceCounter()
{
    auto ptr = lock();
    if(ptr)
        return ptr->getReferenceCounter();
    return nullptr;
}

Variant& ResourceUser::getCustomData(const std::string &entry)
{
    auto ptr = lock();
    if(ptr)
        return ptr->getCustomData(entry);
    return Variant::Null;
}

const Variant& ResourceUser::getCustomData(const std::string &entry) const
{
    auto ptr = lock();
    if(ptr)
        return ptr->getCustomData(entry);
    return Variant::Null;
}

void ResourceUser::setCustomData(const std::string &entry, const Gre::Variant &data)
{
    auto ptr = lock();
    if(ptr)
        ptr->setCustomData(entry, data);
}

ResourceUser ResourceUser::Null = ResourceUser(nullptr);

GreEndNamespace
