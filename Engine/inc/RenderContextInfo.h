//
//  RenderContextInfo.h
//  GRE
//
//  Created by Jacques Tronconi on 12/02/2016.
//
//

#ifndef GRE_RenderContextInfo_h
#define GRE_RenderContextInfo_h

#include "Pools.h"
#include "Variant.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @brief Holds some elements to construct a correct Context. Those
/// parameters can be or not be used by the Renderer when creating the
/// RenderContext, see the RenderContext documentation.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderContextInfo
{
public:
    
    RenderContextInfo();
    ~RenderContextInfo();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Adds or set a new entry.
    //////////////////////////////////////////////////////////////////////
    void add(const std::string& entryName, const Variant& entryValue);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Adds or set a new entry.
    //////////////////////////////////////////////////////////////////////
    template<typename Var>
    void add(const std::string& entryName, const Var& entryValue) {
        add(entryName, Variant(entryValue));
    }
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns every Entries.
    //////////////////////////////////////////////////////////////////////
    std::map<std::string, Variant>& getEntries();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns every Entries.
    //////////////////////////////////////////////////////////////////////
    const std::map<std::string, Variant>& getEntries() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if Entry is in the configuration.
    //////////////////////////////////////////////////////////////////////
    bool hasEntry(const std::string& entryName) const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Variant behind the value.
    //////////////////////////////////////////////////////////////////////
    Variant& getValue(const std::string& entryName);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Variant behind the value.
    //////////////////////////////////////////////////////////////////////
    const Variant& getValue(const std::string& entryName) const;
    
    /// @brief A Null RenderContextInfo.
    static RenderContextInfo Null;
    
private:
    
    /// @brief A Dictionnary holding the values.
    std::map<std::string, Variant> _mDictionnary;
};

GreEndNamespace

#endif
