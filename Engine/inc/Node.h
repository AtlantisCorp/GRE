//
//  Node.h
//  GRE
//
//  Created by Jacques Tronconi on 14/12/2015.
//
//

#ifndef GRE_Node_h
#define GRE_Node_h

#include "NodePrivate.h"

#include "Listener.h"
#include "Emitter.h"

GRE_BEGIN_NAMESPACE

//////////////////////////////////////////////////////////////////////
/// @brief Proxy object to use a Node.
/// The Node User object can also be a Listener. It permits the Node to
/// be updated by the Scene object, and by the Renderer.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC Node : public ResourceUser, public Transmitter
{
public:
    
    /// @brief Describes some filters used when accessing Nodes.
    enum class Filter
    {
        FarthestToNearest,  ///< @brief Filter Nodes from the farthest to the nearest.
        NearestToFarthest,  ///< @brief Filter Nodes from the nearest to the farthest.
        Default             ///< @brief No filters.
    };
    
public:
    
    POOLED(Pools::Resource)
    
    Node();
    Node(Node&& rhs);
    Node(const Node& rhs);
    explicit Node(const ResourceUser& rhs);
    explicit Node(std::weak_ptr<NodePrivate> rhs);
    
    ~Node();
    
    Node& operator = (const Node& node);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Adds a new child to this Node.
    /// @param child    The Node to add.
    //////////////////////////////////////////////////////////////////////
    Node addChild(const Node& child);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Adds a new child to this Node and owns the shared pointer.
    /// @param child    The Node to add.
    //////////////////////////////////////////////////////////////////////
    Node addChild(NodePrivate* child);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Translate the Node by given vector.
    //////////////////////////////////////////////////////////////////////
    void translate(const Vector3& vector);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Rotates the Node from given Angle to given Axis.
    //////////////////////////////////////////////////////////////////////
    void rotate(float angle, const Vector3& axe);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Set the visible property of the Node.
    //////////////////////////////////////////////////////////////////////
    void setVisible(bool visible);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the value of the visible property.
    //////////////////////////////////////////////////////////////////////
    bool isVisible() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the Mesh used by this Node.
    //////////////////////////////////////////////////////////////////////
    void setMesh(const Mesh& mesh);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Mesh contained in a Node.
    //////////////////////////////////////////////////////////////////////
    Mesh& getMesh();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Mesh contained in a Node.
    //////////////////////////////////////////////////////////////////////
    const Mesh& getMesh() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the Camera holded by this Node.
    //////////////////////////////////////////////////////////////////////
    void setCamera(const Camera& camera);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Camera holded in this Node, or Camera::Null if
    /// none is holded.
    //////////////////////////////////////////////////////////////////////
    Camera& getCamera();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Camera holded in this Node, or Camera::Null if
    /// none is holded.
    //////////////////////////////////////////////////////////////////////
    const Camera& getCamera() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the NodePrivate object in a std::weak_ptr .
    //////////////////////////////////////////////////////////////////////
    std::weak_ptr<NodePrivate> toWeakPtr();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the NodePrivate object in a std::weak_ptr .
    //////////////////////////////////////////////////////////////////////
    const std::weak_ptr<NodePrivate> toWeakPtr() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the Parent of this Node.
    //////////////////////////////////////////////////////////////////////
    void setParent(const Node& node);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Node matrix.
    //////////////////////////////////////////////////////////////////////
    Matrix4 getNodeMatrix();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Node matrix.
    //////////////////////////////////////////////////////////////////////
    const Matrix4 getNodeMatrix() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Sets the Node matrix.
    //////////////////////////////////////////////////////////////////////
    void setNodeMatrix(const Matrix4& mat4);
    
    /// @brief Represent a Node null.
    static Node Null;
    
private:
    
    /// @brief Hold a pointer to real class object.
    std::weak_ptr<NodePrivate> _mNode;
};

GRE_END_NAMESPACE

#endif
