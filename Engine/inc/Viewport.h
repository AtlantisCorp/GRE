//////////////////////////////////////////////////////////////////////
//
//  Viewport.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2017 Luk2010
//  Created on 09/03/2016.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef GRE_Viewport_h
#define GRE_Viewport_h

#include "Pools.h"
#include "Projection.h"
#include "Color.h"

GreBeginNamespace ;

//////////////////////////////////////////////////////////////////////
/// @brief A relative Viewport object. Its real size is updated using
/// 'adaptRealValues' and are accessed using the normal surface
/// properties.
///
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC Viewport : public Surface
{
public:

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Viewport ( float l = 0.0f , float t = 0.0f , float w = 1.0f , float h = 1.0f ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Viewport ( const Viewport & v ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Viewport ( const Surface & s ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Updates the Surface's real values from the given values and
    /// the relative values.
    //////////////////////////////////////////////////////////////////////
    void adaptRealValues ( const Surface & values ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Updates the Surface's values width and height with given
    /// values.
    //////////////////////////////////////////////////////////////////////
    void adaptRealArea ( int width , int height ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Updates the Surface's values left and top with given values.
    //////////////////////////////////////////////////////////////////////
    void adaptRealCorner ( int left , int top ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Calculates the Area taken by this viewport.
    //////////////////////////////////////////////////////////////////////
    size_t getArea () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setProjection ( const Projection & projection ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the projection used with this viewport.
    //////////////////////////////////////////////////////////////////////
    const Projection & getProjection () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    bool regioned () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Surface region () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setRegion ( const Surface & r ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float cleardepth () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setClearDepth ( float v ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Color & clearcolor () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setClearColor ( const Color & c ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const ClearBuffers & clearbuffers () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setClearBuffers ( const ClearBuffers & buffers ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Updates values with a new surface. This function is generally
    /// called by framebuffer , when for example the listened window changes
    /// its size. Notes it should also update the projection object.
    //////////////////////////////////////////////////////////////////////
    void update ( const Surface & surface ) ;

protected:

    /// @brief Relative left value.
    float rl ;

    /// @brief Relative top value.
    float rt ;

    /// @brief Relative width value.
    float rw ;

    /// @brief Relative height value.
    float rh ;

    /// @brief Holds a projection object. This is done as each framebuffer has
    /// a viewport , it may always be done with a projection object. This object
    /// may be held by the viewport , as copying the viewport will create a new
    /// projection object.
    Projection iProjection ;

    /// @brief A region is a portion of the viewport's area that should be draw
    /// to the framebuffer. Notes if this region has a null area , it will be considered
    /// as empty.
    Surface iRegion ;

    /// @brief The depth clearance value. Default is 0.1f .
    float iClearDepth ;

    /// @brief Color cleareance value. Default is LightGrey .
    Color iClearColor ;

    /// @brief Buffers cleared when binding this viewport to the framebuffer.
    ClearBuffers iClearBuffers ;
};

GreEndNamespace

#endif
