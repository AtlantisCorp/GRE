//////////////////////////////////////////////////////////////////////
//
//  Light.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2016 Luk2010
//  Created on 20/02/2017.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef GreSdk_Light_h
#define GreSdk_Light_h

#include "Pools.h"
#include "Lockable.h"
#include "Color.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @brief Enumerates the light's types.
enum class LightType : int
{
    Directionnal = 0 ,
    Point        = 1 ,
    Spot         = 2
};

//////////////////////////////////////////////////////////////////////
/// @brief Represents a Light object with all its parameters.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC Light : public Lockable
{
public:
    
    POOLED ( Pools::Referenced )
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Light (const Vector3& position = Vector3(0.0f, 0.0f, 0.0f) ,
           const Color& ambient = Color(1.0f, 1.0f, 1.0f, 1.0f) ,
           const Color& diffuse = Color(0.0f, 0.0f, 0.0f, 1.0f) ,
           const Color& specular = Color(0.0f, 0.0f, 0.0f, 1.0f) ,
           float shininess = 32.0f ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Light ( const Light & rhs ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Light& operator = ( const Light& rhs ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual ~Light () noexcept ( false ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const LightType & getType () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setType ( const LightType& type ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    bool isEnabled () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setEnabled ( bool value ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setPosition ( const Vector3& position ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Vector3& getPosition () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Color& getAmbient () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setAmbient ( const Color& ambient ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Color& getDiffuse () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setDiffuse ( const Color& diffuse ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Color& getSpecular () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setSpecular ( const Color& specular ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float getShininess () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float getAttenuationCst () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setAttenuationCst ( float value ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float getAttenuationLinear () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setAttenuationLinear ( float value ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float getAttenuationQuad () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setAttenuationQuad ( float value ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Vector3& getDirection ( ) const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setDirection ( const Vector3& direction ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float getAngle () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setAngle ( float value ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    float getExposition () const ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    void setExposition ( float value ) ;
    
protected:
    
    // [ ALL LIGHTS ]
    
    LightType iType ;
    
    bool iEnabled ;
    
    /// @brief
    Vector3 iPosition ;
    
    /// @brief
    Color iAmbient ;
    
    /// @brief
    Color iDiffuse ;
    
    /// @brief
    Color iSpecular ;
    
    /// @brief
    float iShininess ;
    
    // [ SPOTS + POINTS ]
    
    /// @brief
    float iAttenuationCst ;
    float iAttenuationLinear ;
    float iAttenuationQuad ;
    
    // [ SPOTS ]
    
    Vector3 iDirection ;
    float iAngle ;
    float iExposition ;
};

GreEndNamespace

#endif
