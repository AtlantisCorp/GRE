////////////////////////////////////////////////////
//  File    : Camera.h
//  Project : GRE
//
//  Created by Jacques Tronconi on 07/05/2016.
//  Copyright @Luk2010, 2016
//
////////////////////////////////////////////////////

#ifndef GRE_Camera_h
#define GRE_Camera_h

#include "Resource.h"

GreBeginNamespace

////////////////////////////////////////////////////
/// @brief Base class for Camera objects.
///
/// The Camera should reacts with Events. Also, it should
/// inform the Renderer about certains parameters.
/// Those parameters are managed by the Camera object.
////////////////////////////////////////////////////
class DLL_PUBLIC CameraPrivate : public Resource
{
public:
    
    POOLED(Pools::Resource)
    
    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    CameraPrivate(const std::string& name);
    
    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    virtual ~CameraPrivate();
    
    ////////////////////////////////////////////////////
    /// @brief Return the position of the camera.
    ////////////////////////////////////////////////////
    const Vector3& getPosition() const;
    
    ////////////////////////////////////////////////////
    /// @brief Set a new position to the camera.
    ////////////////////////////////////////////////////
    void setPosition(const Vector3& position);
    void offsetPosition(const Vector3& offset);
    
    ////////////////////////////////////////////////////
    /// @brief Returns the vertical viewing angle of the
    /// camera, in degrees.
    ////////////////////////////////////////////////////
    float getFieldOfView() const;
    void setFieldOfView(float fov);
    
    ////////////////////////////////////////////////////
    /// @brief Returns the closest visible distance from
    /// the camera.
    ////////////////////////////////////////////////////
    float getNearPlane() const;
    
    ////////////////////////////////////////////////////
    /// @brief Returns the farthest visible distance from
    /// the camera.
    ////////////////////////////////////////////////////
    float getFarPlane() const;
    
    ////////////////////////////////////////////////////
    /// @brief Set the near and far distance planes.
    ////////////////////////////////////////////////////
    void setNearAndFarPlanes(float near, float far);
    
    ////////////////////////////////////////////////////
    /// @brief Returns a rotation matrix that determines
    /// the direction the camera is looking.
    ////////////////////////////////////////////////////
    Matrix4 getOrientation() const;
    
    ////////////////////////////////////////////////////
    /// @brief Offsets the cameras orientation.
    /// The verticle angle is constrained between 85deg and -85deg to avoid gimbal lock.
    /// @param upAngle     the angle (in degrees) to offset upwards. Negative values are downwards.
    /// @param rightAngle  the angle (in degrees) to offset rightwards. Negative values are leftwards.
    ////////////////////////////////////////////////////
    void offsetOrientation(float upAngle, float rightAngle);
    
    ////////////////////////////////////////////////////
    /// @brief Orients the camera so it is directly facing 'position'.
    ////////////////////////////////////////////////////
    void lookAt(const Vector3& position);
    
    ////////////////////////////////////////////////////
    /// @brief The width divided by the height of the
    /// screen/window/viewport
    ////////////////////////////////////////////////////
    float getViewportAspectRatio() const;
    void setViewportAspectRatio(float ratio);
    
    ////////////////////////////////////////////////////
    /// @brief A unit vector representing the direction the
    /// camera is facing.
    ////////////////////////////////////////////////////
    Vector3 forward() const;
    
    ////////////////////////////////////////////////////
    /// @brief A unit vector representing the direction to
    /// the right of the camera.
    ////////////////////////////////////////////////////
    Vector3 right() const;
    
    ////////////////////////////////////////////////////
    /// @brief A unit vector representing the direction out
    /// of the top of the camera.
    ////////////////////////////////////////////////////
    Vector3 up() const;
    
    ////////////////////////////////////////////////////
    /// @brief A combined matrix including perspective projection.
    ////////////////////////////////////////////////////
    Matrix4 getMatrix() const;
    
    ////////////////////////////////////////////////////
    /// @brief The perspective projection transformation matrix.
    ////////////////////////////////////////////////////
    Matrix4 getProjection() const;
    
    ////////////////////////////////////////////////////
    /// @brief The translation and rotation matrix of the camera.
    ////////////////////////////////////////////////////
    Matrix4 getView() const;
    
protected:
    
    ////////////////////////////////////////////////////
    ////////////////////////////////////////////////////
    void _normalizeAngles();
    
private:
    
    Vector3 iPosition;
    float iHorizontalAngle;
    float iVerticalAngle;
    float iFieldOfView;
    float iNearPlane;
    float iFarPlane;
    float iViewportRatio;
    float iMaxVerticalAngle;
    
    //float    iMoveSpeed;
};

/// @brief SpecializedResourceHolder for CameraPrivate.
typedef SpecializedResourceHolder<CameraPrivate> CameraHolder;

/// @brief SpecializedResourceHolderList for CameraHolder's list.
typedef SpecializedResourceHolderList<CameraPrivate> CameraHolderList;

////////////////////////////////////////////////////
/// @brief SpecializedResourceUser for CameraPrivate.
////////////////////////////////////////////////////
class Camera : public SpecializedResourceUser<CameraPrivate>
{
public:
    
    POOLED(Pools::Resource)
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a Camera from pointer.
    //////////////////////////////////////////////////////////////////////
    Camera(CameraPrivate* node);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a Camera from a holder.
    //////////////////////////////////////////////////////////////////////
    Camera(const CameraHolder& holder);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a Camera from another Camera.
    //////////////////////////////////////////////////////////////////////
    Camera(const Camera& user);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Destructs a Camera.
    //////////////////////////////////////////////////////////////////////
    virtual ~Camera();
};

GreEndNamespace

#endif
