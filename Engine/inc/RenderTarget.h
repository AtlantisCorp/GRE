//////////////////////////////////////////////////////////////////////
//
//  RenderTarget.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2016 Luk2010
//  Created on 15/02/2016.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef GRE_RenderTarget_h
#define GRE_RenderTarget_h

#include "Pools.h"
#include "Resource.h"
#include "Scene.h"
#include "RenderContext.h"
#include "FrameBuffer.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @brief An Object where the Renderer can render a Scene on it.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderTargetPrivate : public Resource
{
public:
    
    POOLED(Pools::Render)
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a RenderTarget.
    //////////////////////////////////////////////////////////////////////
    RenderTargetPrivate(const std::string& name);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Destructs the RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual ~RenderTargetPrivate();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Bind the RenderTarget.
    /// In case this RenderTarget has a RenderContext object, this function
    /// may change the current RenderContext.
    //////////////////////////////////////////////////////////////////////
    virtual void bind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Unbind the RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual void unbind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, should bind the internal Framebuffer.
    /// This method is used by the Renderer in order to be able to draw the
    /// result of the blended Pass'es objects in a custom Framebuffer.
    //////////////////////////////////////////////////////////////////////
    virtual void bindFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, unbind the internal Framebuffer.
    //////////////////////////////////////////////////////////////////////
    virtual void unbindFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Select a RenderScene to be rendered when rendering on this
    /// RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual void selectScene(const RenderScene& scene);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Selected RenderScene to be rendered on this Target.
    //////////////////////////////////////////////////////////////////////
    virtual RenderScene getSelectedScene();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget contains a RenderContext
    /// and should be drawed by the Renderer during the first phase.
    //////////////////////////////////////////////////////////////////////
    virtual bool holdsRenderContext() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns an holder to the RenderContext associated to this
    /// RenderTarget, or null.
    //////////////////////////////////////////////////////////////////////
    virtual RenderContextHolder getRenderContext();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns an holder to the RenderContext associated to this
    /// RenderTarget, or null.
    //////////////////////////////////////////////////////////////////////
    virtual const RenderContextHolder getRenderContext() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget contains a special
    /// RenderFramebuffer to draw to.
    //////////////////////////////////////////////////////////////////////
    virtual bool holdsFramebuffer() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the RenderFramebufferHolder this RenderTarget contains,
    /// or null.
    //////////////////////////////////////////////////////////////////////
    virtual RenderFramebufferHolder getFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the RenderFramebufferHolder this RenderTarget contains,
    /// or null.
    //////////////////////////////////////////////////////////////////////
    virtual const RenderFramebufferHolder getFramebuffer() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget needs to be drawed, either
    /// because it has changed or because the Scene has changed.
    //////////////////////////////////////////////////////////////////////
    virtual bool needsDrawing() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Forces the draw of this RenderTarget for one frame.
    //////////////////////////////////////////////////////////////////////
    virtual void forceRedraw();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Used by the Renderer to notifiate the RenderTarget it has
    /// been drawed.
    //////////////////////////////////////////////////////////////////////
    virtual void onRenderFinished() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Draw immediately the surface from this RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual void draw() = 0;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if the RenderTarget is ready to be drawn on.
    /// For example , this should be true for a Window object if the Window
    /// is directly visible by the user on the screen ( 'isVisible' and
    /// 'isOnActiveSpace' properties on macOs ).
    /// @return True by default, but should be overwritten.
    //////////////////////////////////////////////////////////////////////
    virtual bool isAvailableForDrawing () const;
    
protected:
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Called when receiving Update Event.
    /// [thread-safe]
    ///
    /// The UpdateEvent can be emitted when Window objects themself, using
    /// ResourceManager::loop() or Window::update().
    //////////////////////////////////////////////////////////////////////
    virtual void onUpdateEvent(const UpdateEvent& e);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Called when a Key is up.
    //////////////////////////////////////////////////////////////////////
    virtual void onKeyUpEvent(const KeyUpEvent& e);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Called when a Key is down.
    //////////////////////////////////////////////////////////////////////
    virtual void onKeyDownEvent(const KeyDownEvent& e);
    
private:
    
    /// @brief The Selected Scene to render on this RenderTarget.
    RenderScene iSelectedScene;
    
    /// @brief Must this RenderTarget be rendered ?
    mutable bool iNeedsDrawing;
};

/// @brief SpecializedResourceHolder for RenderTargetPrivate.
typedef SpecializedResourceHolder<RenderTargetPrivate> RenderTargetHolder;

/// @brief SpecializedResourceHolderList for RenderTargetPrivate.
typedef SpecializedResourceHolderList<RenderTargetPrivate> RenderTargetHolderList;

//////////////////////////////////////////////////////////////////////
/// @brief SpecializedResourceUser for RenderTargetPrivate.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderTarget : public SpecializedResourceUser<RenderTargetPrivate>
{
public:
    
    POOLED(Pools::Render)
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a RenderTarget from pointer.
    //////////////////////////////////////////////////////////////////////
    RenderTarget(const RenderTargetPrivate* pointer);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a RenderTarget from holder.
    //////////////////////////////////////////////////////////////////////
    RenderTarget(const RenderTargetHolder& holder);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a RenderTarget from user.
    //////////////////////////////////////////////////////////////////////
    RenderTarget(const RenderTarget& user);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Destructs the RenderTarget user.
    //////////////////////////////////////////////////////////////////////
    virtual ~RenderTarget();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Bind the RenderTarget.
    /// In case this RenderTarget has a RenderContext object, this function
    /// may change the current RenderContext.
    //////////////////////////////////////////////////////////////////////
    virtual void bind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Unbind the RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual void unbind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, should bind the internal Framebuffer.
    /// This method is used by the Renderer in order to be able to draw the
    /// result of the blended Pass'es objects in a custom Framebuffer.
    //////////////////////////////////////////////////////////////////////
    virtual void bindFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, unbind the internal Framebuffer.
    //////////////////////////////////////////////////////////////////////
    virtual void unbindFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Select a RenderScene to be rendered when rendering on this
    /// RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual void selectScene(const RenderScene& scene);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Selected RenderScene to be rendered on this Target.
    //////////////////////////////////////////////////////////////////////
    virtual RenderScene getSelectedScene();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget contains a RenderContext
    /// and should be drawed by the Renderer during the first phase.
    //////////////////////////////////////////////////////////////////////
    virtual bool holdsRenderContext() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns an holder to the RenderContext associated to this
    /// RenderTarget, or null.
    //////////////////////////////////////////////////////////////////////
    virtual RenderContextHolder getRenderContext();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns an holder to the RenderContext associated to this
    /// RenderTarget, or null.
    //////////////////////////////////////////////////////////////////////
    virtual const RenderContextHolder getRenderContext() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget contains a special
    /// RenderFramebuffer to draw to.
    //////////////////////////////////////////////////////////////////////
    virtual bool holdsFramebuffer() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the RenderFramebufferHolder this RenderTarget contains,
    /// or null.
    //////////////////////////////////////////////////////////////////////
    virtual RenderFramebufferHolder getFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the RenderFramebufferHolder this RenderTarget contains,
    /// or null.
    //////////////////////////////////////////////////////////////////////
    virtual const RenderFramebufferHolder getFramebuffer() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget needs to be drawed, either
    /// because it has changed or because the Scene has changed.
    //////////////////////////////////////////////////////////////////////
    virtual bool needsDrawing() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Forces the draw of this RenderTarget for one frame.
    //////////////////////////////////////////////////////////////////////
    virtual void forceRedraw();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Used by the Renderer to notifiate the RenderTarget it has
    /// been drawed.
    //////////////////////////////////////////////////////////////////////
    virtual void onRenderFinished() const;
};

GreEndNamespace

#endif
