//
//  RenderTarget.h
//  GRE
//
//  Created by Jacques Tronconi on 15/02/2016.
//
//

#ifndef GRE_RenderTarget_h
#define GRE_RenderTarget_h

#include "Pools.h"
#include "Scene.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @brief An Object where the Renderer can render a Scene on it.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderTargetPrivate
{
public:
    
    RenderTargetPrivate();
    virtual ~RenderTargetPrivate();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Bind the RenderTarget.
    /// In case this RenderTarget has a RenderContext object, this function
    /// may change the current RenderContext.
    //////////////////////////////////////////////////////////////////////
    virtual void bind() = 0;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Unbind the RenderTarget.
    //////////////////////////////////////////////////////////////////////
    virtual void unbind() = 0;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, should bind the internal Framebuffer.
    /// This method is used by the Renderer in order to be able to draw the
    /// result of the blended Pass'es objects in a custom Framebuffer.
    //////////////////////////////////////////////////////////////////////
    virtual void bindFramebuffer() = 0;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, unbind the internal Framebuffer.
    //////////////////////////////////////////////////////////////////////
    virtual void unbindFramebuffer() = 0;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Select a Scene to be rendered when rendering on this
    /// RenderTarget.
    //////////////////////////////////////////////////////////////////////
    void selectScene(const Scene& scene);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Selected Scene to be rendered on this Target.
    //////////////////////////////////////////////////////////////////////
    Scene getSelectedScene();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget contains a RenderContext
    /// and should be drawed by the Renderer during the first phase.
    //////////////////////////////////////////////////////////////////////
    virtual bool holdsRenderContext() const = 0;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget needs to be drawed, either
    /// because it has changed or because the Scene has changed.
    //////////////////////////////////////////////////////////////////////
    virtual bool needsDrawing() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Forces the draw of this RenderTarget for one frame.
    //////////////////////////////////////////////////////////////////////
    void forceRedraw();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Used by the Renderer to notifiate the RenderTarget it has
    /// been drawed.
    //////////////////////////////////////////////////////////////////////
    virtual void onRenderFinished() const;
    
private:
    
    /// @brief The Selected Scene to render on this RenderTarget.
    Scene _mSelectedScene;
    
    /// @brief Must this RenderTarget be rendered ?
    mutable bool _mNeedsDrawing;
};

//////////////////////////////////////////////////////////////////////
/// @brief A custom User Object that can be used to hold a RenderTarget
/// Object.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderTarget
{
public:
    
    RenderTarget();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Constructs a RenderTarget User Object with an object that
    /// should be a RenderTarget.
    //////////////////////////////////////////////////////////////////////
    template<typename T>
    RenderTarget(const T& ObjectUser) {
        _mRenderTarget = std::dynamic_pointer_cast<RenderTargetPrivate>(ObjectUser.lock());
    }
    
    ~RenderTarget();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Bind the RenderTarget.
    /// In case this RenderTarget has a RenderContext object, this function
    /// may change the current RenderContext.
    //////////////////////////////////////////////////////////////////////
    void bind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Unbind the RenderTarget.
    //////////////////////////////////////////////////////////////////////
    void unbind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, should bind the internal Framebuffer.
    /// This method is used by the Renderer in order to be able to draw the
    /// result of the blended Pass'es objects in a custom Framebuffer.
    //////////////////////////////////////////////////////////////////////
    void bindFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief If has one, unbind the internal Framebuffer.
    //////////////////////////////////////////////////////////////////////
    void unbindFramebuffer();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Select a Scene to be rendered when rendering on this
    /// RenderTarget.
    //////////////////////////////////////////////////////////////////////
    void selectScene(const Scene& scene);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Selected Scene to be rendered on this Target.
    //////////////////////////////////////////////////////////////////////
    Scene getSelectedScene();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget contains a RenderContext
    /// and should be drawed by the Renderer during the first phase.
    //////////////////////////////////////////////////////////////////////
    bool holdsRenderContext() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this RenderTarget needs to be drawed, either
    /// because it has changed or because the Scene has changed.
    //////////////////////////////////////////////////////////////////////
    bool needsDrawing() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Forces the draw of this RenderTarget for one frame.
    //////////////////////////////////////////////////////////////////////
    void forceRedraw();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Used by the Renderer to notifiate the RenderTarget it has
    /// been drawed.
    //////////////////////////////////////////////////////////////////////
    void onRenderFinished() const;
    
private:
    
    /// @brief Holds a pointer to the RenderTarget Object.
    std::weak_ptr<RenderTargetPrivate> _mRenderTarget;
};

GreEndNamespace

#endif
