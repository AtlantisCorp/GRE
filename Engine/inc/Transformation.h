//////////////////////////////////////////////////////////////////////
//
//  Transformation.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2016 Luk2010
//  Created on 15/06/2016.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef GRE_Transformation_h
#define GRE_Transformation_h

#include "Pools.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @class Transformation
/// @brief Stores Transformation's components like 'translation',
/// 'rotation' and 'scale'.
///
/// This class also retains default values for Right/Up/Front
/// vectors. Those values can be changed by the user, but only before
/// creating any Camera, Lights, or other position-related objects.
///
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC Transformation
{
public:

    //////////////////////////////////////////////////////////////////////
    /// @brief Creates a non-transforming Transformation.
    //////////////////////////////////////////////////////////////////////
    Transformation();

    //////////////////////////////////////////////////////////////////////
    /// @brief Creates a Transformation.
    //////////////////////////////////////////////////////////////////////
    Transformation(const Vector3& translation);

    //////////////////////////////////////////////////////////////////////
    /// @brief Creates a Transformation.
    //////////////////////////////////////////////////////////////////////
    Transformation(const Vector3& translation, const Matrix4& rotation);

    //////////////////////////////////////////////////////////////////////
    /// @brief Creates a Transformation.
    //////////////////////////////////////////////////////////////////////
    Transformation(const Vector3& translation, const Matrix4& rotation, const Vector3& scale);

    //////////////////////////////////////////////////////////////////////
    /// @brief Copies a Transformation.
    //////////////////////////////////////////////////////////////////////
    Transformation(const Transformation& other);

    //////////////////////////////////////////////////////////////////////
    /// @brief Destructs the Transformation.
    //////////////////////////////////////////////////////////////////////
    ~Transformation();

    //////////////////////////////////////////////////////////////////////
    /// @brief Translate the component.
    //////////////////////////////////////////////////////////////////////
    void translate(const Vector3& translation);

    //////////////////////////////////////////////////////////////////////
    /// @brief Set the iTranslation property.
    //////////////////////////////////////////////////////////////////////
    void setTranslation(const Vector3& translation);

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Translation component.
    //////////////////////////////////////////////////////////////////////
    const Vector3& getTranslation() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Rotates the component.
    //////////////////////////////////////////////////////////////////////
    void rotate(float angle, const Vector3& axis);

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the Quaternion based on direction vector.
    //////////////////////////////////////////////////////////////////////
    void setDirection ( const Vector3& direction ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Set the iRotation property.
    //////////////////////////////////////////////////////////////////////
    void setRotation(const Quaternion& rotation);

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Rotation component.
    //////////////////////////////////////////////////////////////////////
    const Quaternion& getRotation() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Scales the component.
    //////////////////////////////////////////////////////////////////////
    void scale(const Vector3& scalev);

    //////////////////////////////////////////////////////////////////////
    /// @brief Sets the iScale property.
    //////////////////////////////////////////////////////////////////////
    void setScale(const Vector3& scalev);

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Scale.
    //////////////////////////////////////////////////////////////////////
    const Vector3& getScale() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns a Matrix4 identity, translated, rotated and scaled
    /// by the components of this class.
    //////////////////////////////////////////////////////////////////////
    Matrix4 get() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Applies the Transformation on this one, using translate(),
    /// rotate() and scale().
    //////////////////////////////////////////////////////////////////////
    void apply(const Transformation& transformation);

    /// @brief Default Transformation.
    static Transformation Default;

    /// @brief Default Right value. ( 1.0 , 0.0 , 0.0 )
    static Vector3 Right ;

    /// @brief Default Up value. ( 0.0 , 1.0 , 0.0 )
    static Vector3 Up ;

    /// @brief Default Forward value. ( 0.0 , 0.0 , 1.0 )
    static Vector3 Forward ;

private:

    /// @brief Translation component.
    Vector3 iTranslation;

    /// @brief Rotation component.
    Quaternion iRotation;

    /// @brief Scale component.
    Vector3 iScale;
};

GreEndNamespace

#endif
