//
//  HardwareProgramVariables.h
//  GRE
//
//  Created by Jacques Tronconi on 07/01/2016.
//
//

#ifndef GRE_HardwareProgramVariables_h
#define GRE_HardwareProgramVariables_h

#include "Pools.h"
#include "HardwareProgramVariable.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @brief A set of HardwareProgram Variables.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC HardwareProgramVariables
{
public:
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Helper to hold and release the Variables object.
    //////////////////////////////////////////////////////////////////////
    typedef std::shared_ptr<HardwareProgramVariable> VariableHolder;
    
    HardwareProgramVariables();
    ~HardwareProgramVariables();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Add a new HardwareProgramVariable to the set.
    //////////////////////////////////////////////////////////////////////
    void addUniform(HardwareProgramVariable* hdwVariable);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Attribs of this Program.
    //////////////////////////////////////////////////////////////////////
    std::vector<VariableHolder>& getAttribs();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Attribs of this Program.
    //////////////////////////////////////////////////////////////////////
    const std::vector<VariableHolder>& getAttribs() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Uniforms of this Program.
    //////////////////////////////////////////////////////////////////////
    std::vector<VariableHolder>& getUniforms();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Uniforms of this Program.
    //////////////////////////////////////////////////////////////////////
    const std::vector<VariableHolder>& getUniforms() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Finds a Uniform using its name.
    //////////////////////////////////////////////////////////////////////
    VariableHolder findUniform(const std::string& name);
    
    static HardwareProgramVariables Empty;
    
private:
    
    /// @brief Holds the attrib / in variables.
    std::vector<VariableHolder> _mAttribs;
    
    /// @brief Holds the uniforms.
    std::vector<VariableHolder> _mUniforms;
};

GreEndNamespace

#endif
