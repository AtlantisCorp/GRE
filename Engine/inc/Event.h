//////////////////////////////////////////////////////////////////////
//
//  Event.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2016 Luk2010
//  Created on 23/11/2015.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef GRE_Event_h
#define GRE_Event_h

#include "Version.h"
#include "Pools.h"
#include "Key.h"

GreBeginNamespace

class Resource ;
class ResourceUser ;

//////////////////////////////////////////////////////////////////////
/// @brief Determines an Event Type.
/// Also list every events available in the Engine.
//////////////////////////////////////////////////////////////////////
enum class EventType
{
    KeyDown,
    KeyUp,
    Update,
    
    /// @brief A General Window event.
    Window,
    
    WindowSized ,
    WindowMoved ,
    WindowExposed ,
    WindowWillClose ,
    WindowTitleChanged
};

//////////////////////////////////////////////////////////////////////
/// @brief Defines a basic event.
/// You should always check the type of this event before using
/// the ::to() function in order to use it correctly.
//////////////////////////////////////////////////////////////////////
class Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Event ( const Resource* emitter , const EventType& etype ) ;
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual ~Event() noexcept(false);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Emitter ResourceUser .
    //////////////////////////////////////////////////////////////////////
    const ResourceUser& getEmitter () const ;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the event's type.
    //////////////////////////////////////////////////////////////////////
    const EventType& getType () const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the event but according to its real type.
    //////////////////////////////////////////////////////////////////////
    template<typename T>
    const T& to() const { return *reinterpret_cast<T*>(const_cast<Event*>(this)); }
    
protected:
    
    /// @brief Emitter for this event .
    const ResourceUser* iEmitter ;
    
    /// @brief Type for this event .
    const EventType iType;
};

/// @brief A Generic Event callback.
typedef std::function < void ( const Event& ) > EventCallback;

typedef std::chrono::high_resolution_clock::duration   UpdateClock;
typedef std::chrono::high_resolution_clock::time_point UpdateTime;
typedef std::chrono::high_resolution_clock             UpdateChrono;

//////////////////////////////////////////////////////////////////////
/// @brief A generic update event that notify the listener it should be
/// updated.
//////////////////////////////////////////////////////////////////////
class UpdateEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    UpdateEvent( const Resource* emitter , const UpdateClock& t ) ;
    
    /// @brief Elapsed Time .
    UpdateClock elapsedTime;
};

//////////////////////////////////////////////////////////////////////
/// @brief KeyDown Event .
//////////////////////////////////////////////////////////////////////
class KeyDownEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    KeyDownEvent ( const Resource* emitter , Key key ) ;
    
    /// @brief Key component .
    Key iKey ;
};

//////////////////////////////////////////////////////////////////////
/// @brief KeyUp Event .
//////////////////////////////////////////////////////////////////////
class KeyUpEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    KeyUpEvent ( const Resource* emitter , Key key ) ;
    
    /// @brief Key component .
    Key iKey ;
};

//////////////////////////////////////////////////////////////////////
/// @brief Window Moved Event .
//////////////////////////////////////////////////////////////////////
class WindowMovedEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WindowMovedEvent ( const Resource* emitter , int left , int top ) ;
    
    /// @brief The Left ( x ) component .
    int Left ;
    
    /// @brief The Top ( y ) component .
    int Top ;
};

//////////////////////////////////////////////////////////////////////
/// @brief Window Sized Event .
//////////////////////////////////////////////////////////////////////
class WindowSizedEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WindowSizedEvent ( const Resource* emitter , int width , int height ) ;
    
    /// @brief Width component .
    int Width ;
    
    /// @brief Height component .
    int Height ;
};

//////////////////////////////////////////////////////////////////////
/// @brief Window Exposed Event .
//////////////////////////////////////////////////////////////////////
class WindowExposedEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WindowExposedEvent ( const Resource* emitter , const Surface& surface ) ;
    
    /// @brief The surface it has now to be .
    Surface iSurface ;
};

//////////////////////////////////////////////////////////////////////
/// @brief Window Hidden Event .
//////////////////////////////////////////////////////////////////////
class WindowHiddenEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WindowHiddenEvent ( const Resource* emitter ) ;
};

//////////////////////////////////////////////////////////////////////
/// @brief Window WillClose Event .
//////////////////////////////////////////////////////////////////////
class WindowWillCloseEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WindowWillCloseEvent ( const Resource* emitter ) ;
};

//////////////////////////////////////////////////////////////////////
/// @brief WindowTitleChanged Event .
//////////////////////////////////////////////////////////////////////
class WindowTitleChangedEvent : public Event
{
public:
    
    POOLED(Pools::Event)
    
    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    WindowTitleChangedEvent ( const Resource* emitter , const std::string& title ) ;
    
    /// @brief The new title component .
    std::string iTitle ;
};

GreEndNamespace
#endif
