//////////////////////////////////////////////////////////////////////
//
//  Material.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2017 Luk2010
//  Created on 26/11/2015.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef GRE_Material_h
#define GRE_Material_h

#include "Color.h"
#include "Texture.h"
#include "TechniqueParamBinder.h"

// [14.03.07] NOTES : Material should not use HardwareProgram to bind/unbind things. This
// is only the Technique's job. [26.03.2017] Thought the material can bind parameters to
// the technique , and technique uses alias to resolve parameters name.

GreBeginNamespace

enum class FaceType
{
    Front,
    Back,
    FrontAndBack
};

//////////////////////////////////////////////////////////////////////
/// @brief Regroups every data used to draw a Face like the Textures
/// and others data.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC Material : public Resource , public TechniqueParamBinder
{
public:

    POOLED(Pools::Resource)

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Material(const std::string& name = "DefaultMaterial");

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual ~Material() noexcept ( false ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual void setTexture ( const TechniqueParam & param , const TextureHolder & tex ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual const TextureHolder & getTexture ( const TechniqueParam & param ) const ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iAmbient' property.
    //////////////////////////////////////////////////////////////////////
    virtual const Color& getAmbient() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the 'iAmbient' property.
    //////////////////////////////////////////////////////////////////////
    virtual void setAmbient ( const Color& color );

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iDiffuse' property.
    //////////////////////////////////////////////////////////////////////
    virtual const Color& getDiffuse() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the 'iDiffuse' property.
    //////////////////////////////////////////////////////////////////////
    virtual void setDiffuse ( const Color& color );

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iSpecular' property.
    //////////////////////////////////////////////////////////////////////
    virtual const Color& getSpecular() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the 'iSpecular' property.
    //////////////////////////////////////////////////////////////////////
    virtual void setSpecular ( const Color& color );

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iEmission' property.
    //////////////////////////////////////////////////////////////////////
    virtual const Color& getEmission() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the 'iEmission' property.
    //////////////////////////////////////////////////////////////////////
    virtual void setEmission ( const Color& color );

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iShininess' property.
    //////////////////////////////////////////////////////////////////////
    virtual float getShininess() const;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes the 'iShininess' property.
    //////////////////////////////////////////////////////////////////////
    virtual void setShininess ( float f );

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual const TextureHolder & getAmbientTexture () const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual void setAmbientTexture ( const TextureHolder & tex ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns 'iDiffuseTexture'.
    //////////////////////////////////////////////////////////////////////
    virtual const TextureHolder & getDiffuseTexture () const ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes 'iDiffuseTexture'.
    //////////////////////////////////////////////////////////////////////
    virtual void setDiffuseTexture ( const TextureHolder & texture ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns 'iSpecularTexture'.
    //////////////////////////////////////////////////////////////////////
    virtual const TextureHolder & getSpecularTexture () const ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes 'iSpecularTexture'.
    //////////////////////////////////////////////////////////////////////
    virtual void setSpecularTexture ( const TextureHolder & texture ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Returns 'iNormalTexture'.
    //////////////////////////////////////////////////////////////////////
    virtual const TextureHolder & getNormalTexture () const ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Changes 'iNormalTexture'.
    //////////////////////////////////////////////////////////////////////
    virtual void setNormalTexture ( const TextureHolder & texture ) ;

    //////////////////////////////////////////////////////////////////////
    /// @brief Binds material's parameters.
    //////////////////////////////////////////////////////////////////////
    virtual void use ( const TechniqueHolder & technique ) const ;

private:

    /// @brief Emission color.
    Color iEmission;

    /// @brief Ambient color.
    Color iAmbient;

    /// @brief Diffuse color.
    Color iDiffuse;

    /// @brief Specular color.
    Color iSpecular;

    /// @brief Shininess.
    float iShininess;

    /// @brief Textures holded by the Material , with their alias. Notes this alias should always
    /// be between 'Texture0' and 'TextureMax' , as setting another alias could bind a texture at the
    /// wrong place. 'MaterialTexAmbient' , 'MaterialTexDiffuse' , 'MaterialTexSpecular' and 'MaterialTexNormal'
    /// are also supported.
    std::map < TechniqueParam , TextureHolder > iTextures ;
};

/// @brief SpecializedCountedObjectHolder for MaterialPrivate.
typedef SpecializedCountedObjectHolder<Material> MaterialHolder;

/// @brief SpecializedResourceHolderList for MaterialPrivate.
typedef SpecializedResourceHolderList<Material> MaterialHolderList;

/// @brief SpecializedCountedObjectUser.
typedef SpecializedCountedObjectUser<Material> MaterialUser;

/// @brief std::vector for Material.
typedef std::vector<MaterialUser> MaterialVector;

//////////////////////////////////////////////////////////////////////
/// @brief ResourceLoader for MaterialPrivate.
//////////////////////////////////////////////////////////////////////
class MaterialLoader : public ResourceLoader
{
public:

    POOLED(Pools::Loader)

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    MaterialLoader();

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual ~MaterialLoader();

    //////////////////////////////////////////////////////////////////////
    /// @brief Loads a file that should contains one or more Materials.
    //////////////////////////////////////////////////////////////////////
    virtual MaterialHolderList load ( const std::string& filepath ) const = 0;
};

/// @brief ResourceLoaderFactory for MaterialLoader.
typedef ResourceLoaderFactory<MaterialLoader> MaterialLoaderFactory;

//////////////////////////////////////////////////////////////////////
/// @brief Material Manager.
//////////////////////////////////////////////////////////////////////
class MaterialManager : public SpecializedResourceManager < Material , MaterialLoader >
{
public:

    POOLED(Pools::Manager)

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    MaterialManager( const std::string & name = "DefaultMaterialManager" );

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    virtual ~MaterialManager() noexcept ( false ) ;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Loads a new material with given name. Notes if the material
    /// already exists , reset it and returns it.
    //////////////////////////////////////////////////////////////////////
    virtual MaterialHolder loadBlank ( const std::string & name ) ;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns a material when the first name is encountered.
    //////////////////////////////////////////////////////////////////////
    virtual MaterialHolder get ( const std::string & name ) ;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Loads a Material from its holder. If the holder is already
    /// registered , does nothing.
    //////////////////////////////////////////////////////////////////////
    virtual MaterialHolder loadHolder ( const MaterialHolder & material ) ;
};

/// @brief SpecializedCountedObjectHolder for MaterialManager.
typedef SpecializedCountedObjectHolder < MaterialManager > MaterialManagerHolder ;

GreEndNamespace

#endif
