//
//  RenderContext.h
//  GRE
//
//  Created by Jacques Tronconi on 12/02/2016.
//
//

#ifndef GRE_RenderContext_h
#define GRE_RenderContext_h

#include "RenderContextInfo.h"
#include "Resource.h"
#include "Renderer.h"
#include "Viewport.h"

GreBeginNamespace

//////////////////////////////////////////////////////////////////////
/// @brief Defines a Context which, when binded, enables the Renderer
/// to draw on it.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderContextPrivate : public Resource
{
public:
    
    friend class Renderer;
    
    POOLED(Pools::Resource)
    
    RenderContextPrivate(const std::string& name, const RenderContextInfo& ctxtInfo);
    virtual ~RenderContextPrivate();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the RenderContextInfo's object.
    //////////////////////////////////////////////////////////////////////
    const RenderContextInfo& getInfo() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this object is binded.
    //////////////////////////////////////////////////////////////////////
    bool isBinded() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Bind the RenderContext.
    //////////////////////////////////////////////////////////////////////
    virtual void bind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Unbind this Object (make it unusable).
    //////////////////////////////////////////////////////////////////////
    virtual void unbind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Send every operations remaining to Hardware, and generally
    /// swap buffers.
    //////////////////////////////////////////////////////////////////////
    virtual void flush();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Renderer who created this Context.
    //////////////////////////////////////////////////////////////////////
    Renderer& getRenderer();
    const Renderer& getRenderer() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Adds a Viewport in this Context.
    //////////////////////////////////////////////////////////////////////
    void addViewport(const Viewport& viewport);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Creates a Viewport in this RenderContext.
    /// For the last parameters, if a negative value is given, the opposite
    /// value is set.
    //////////////////////////////////////////////////////////////////////
    void createViewport(const std::string& name, float topratio = 0.0f, float leftratio = 0.0f, float widthratio = 1.0f, float heightratio = 1.0f, bool activated = true);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns every Viewports.
    //////////////////////////////////////////////////////////////////////
    const std::vector<Viewport>& getViewports() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Removes a Viewport.
    //////////////////////////////////////////////////////////////////////
    void removeViewport(const std::string& name);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns a description of this RenderContext.
    /// This function can be overloaded by a subclass in order to provide
    /// other infos to the user.
    //////////////////////////////////////////////////////////////////////
    virtual std::string toString() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Treats Events then calls Actions.
    //////////////////////////////////////////////////////////////////////
    void onEvent(const Event& e);
    
protected:
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Let the RendererResource fill this.
    //////////////////////////////////////////////////////////////////////
    void _setParentRenderer(Renderer parent);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Called when the attached Window changed its size.
    //////////////////////////////////////////////////////////////////////
    virtual void _onWindowSizedEvent(WindowSizedEvent& event);
    
protected:
    
    /// @brief Holds a User to the Renderer who created this Context.
    Renderer _mParentRenderer;
    
    /// @brief Holds some info about this Context.
    RenderContextInfo _mContextInfo;
    
    /// @brief True if this Context is currently binded.
    bool _mIsBinded;
    
    /// @brief Holds the Viewport objects.
    /// Those objects should be updated when the Window object changes its size,
    /// using Listener/Emitter system to handle EventType::WindowSizeChanged.
    std::vector<Viewport> _mViewports;
};

//////////////////////////////////////////////////////////////////////
/// @brief Defines a Context which, when binded, enables the Renderer
/// to draw on it.
//////////////////////////////////////////////////////////////////////
class DLL_PUBLIC RenderContext : public ResourceUser
{
public:
    
    POOLED(Pools::Resource)
    
    RenderContext();
    RenderContext(const RenderContext& rhs);
    RenderContext(RenderContext&& rhs);
    explicit RenderContext(const ResourceUser& rhs);
    RenderContext& operator = (const RenderContext& rhs);
    bool operator == (const RenderContext& rhs) const;
    bool operator != (const RenderContext& rhs) const;
    
    ~RenderContext();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the RenderContextInfo's object.
    //////////////////////////////////////////////////////////////////////
    const RenderContextInfo& getInfo() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this object is binded.
    //////////////////////////////////////////////////////////////////////
    bool isBinded() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Bind the RenderContext.
    //////////////////////////////////////////////////////////////////////
    void bind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Unbind this Object (make it unusable).
    //////////////////////////////////////////////////////////////////////
    void unbind();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Send every operations remaining to Hardware, and generally
    /// swap buffers.
    //////////////////////////////////////////////////////////////////////
    void flush();
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns the Renderer who created this Context.
    //////////////////////////////////////////////////////////////////////
    Renderer& getRenderer();
    const Renderer& getRenderer() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Adds a Viewport in this Context.
    //////////////////////////////////////////////////////////////////////
    void addViewport(const Viewport& viewport);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Creates a Viewport in this RenderContext.
    /// For the last parameters, if a negative value is given, the opposite
    /// value is set.
    //////////////////////////////////////////////////////////////////////
    void createViewport(const std::string& name, float topratio = 0.0f, float leftratio = 0.0f, float widthratio = 1.0f, float heightratio = 1.0f, bool activated = true);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns every Viewports.
    //////////////////////////////////////////////////////////////////////
    const std::vector<Viewport>& getViewports() const;
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Removes a Viewport.
    //////////////////////////////////////////////////////////////////////
    void removeViewport(const std::string& name);
    
    //////////////////////////////////////////////////////////////////////
    /// @brief Returns a description of this RenderContext.
    //////////////////////////////////////////////////////////////////////
    std::string toString() const;
    
    /// @brief A Null typed RenderContext.
    static RenderContext Null;
    
private:
    
    /// @brief The pointer to RenderContextPrivate.
    std::weak_ptr<RenderContextPrivate> _mCtxt;
};

GreEndNamespace

#endif
