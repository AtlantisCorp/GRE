//////////////////////////////////////////////////////////////////////
//
//  ReferenceCountedObject.h
//  This source file is part of Gre
//		(Gang's Resource Engine)
//
//  Copyright (c) 2015 - 2016 Luk2010
//  Created on 27/10/2016.
//
//////////////////////////////////////////////////////////////////////
/*
 -----------------------------------------------------------------------------
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 -----------------------------------------------------------------------------
 */

#ifndef ReferenceCountedObject_h
#define ReferenceCountedObject_h

#include "Pools.h"
#include "Lockable.h"
#include "ReferenceCounter.h"

GreBeginNamespace

class ReferenceCountedObjectHolder ;
class ReferenceCountedObjectUser ;

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
class ReferenceCountedObject : virtual public Lockable
{
public:

    friend class ReferenceCountedObjectHolder ;
    friend class ReferenceCountedObjectUser ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Constructs a ReferenceCountedObject.
    ///
    /// This function does not initialize the 'iCounter' property. The first
    /// ReferenceCountedObjectHolder to own this object will initialize the
    /// counter.
    ///
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObject () ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual ~ReferenceCountedObject () noexcept ( false ) ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iCounter' pointer. If this is null , the counter
    /// has not been initialized and no holder has the ownship for this object.
    ////////////////////////////////////////////////////////////////////////
    ReferenceCounter * getCounter () const ;

protected:

    /// @brief Counter for the object.
    mutable ReferenceCounter * iCounter ;
};

////////////////////////////////////////////////////////////////////////
/// @brief Owning object.
////////////////////////////////////////////////////////////////////////
class ReferenceCountedObjectHolder : public Lockable
{
public:

    ////////////////////////////////////////////////////////////////////////
    /// @brief Creates a null ReferenceCountedObjectHolder.
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectHolder () ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Creates a holder and own the given object.
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectHolder ( const ReferenceCountedObject * object ) ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Creates a holder and owns the object holded by the given holder.
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectHolder ( const ReferenceCountedObjectHolder& holder ) ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual ~ReferenceCountedObjectHolder () noexcept ( false ) ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectHolder & operator = ( const ReferenceCountedObjectHolder& rhs ) ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    bool operator == ( const ReferenceCountedObjectHolder & rhs ) const ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iObject' property.
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObject * getObject () ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Returns the 'iObject' property.
    ////////////////////////////////////////////////////////////////////////
    const ReferenceCountedObject* getObject () const ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Returns true if the object is invalid. ( iObject is null )
    ////////////////////////////////////////////////////////////////////////
    bool isInvalid () const ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Resets the holder.
    ////////////////////////////////////////////////////////////////////////
    void clear () ;

protected:

    /// @brief Object holded.
    ReferenceCountedObject * iObject ;
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
template < typename Class >
class SpecializedCountedObjectHolder : public ReferenceCountedObjectHolder
{
public:

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectHolder () :
    Gre::ReferenceCountedObjectHolder() , iClass ( nullptr )
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectHolder ( const Class * object ) :
    Gre::ReferenceCountedObjectHolder(object) , iClass ( nullptr )
    {
        GreAutolock ;
        iClass = reinterpret_cast<Class*>(iObject) ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectHolder ( const SpecializedCountedObjectHolder<Class> & holder ) :
    Gre::ReferenceCountedObjectHolder(holder) , iClass ( nullptr )
    {
        GreAutolock ;
        iClass = reinterpret_cast<Class*>(iObject) ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    template < typename Subclass >
    SpecializedCountedObjectHolder ( const SpecializedCountedObjectHolder<Subclass> & holder ) :
    Gre::ReferenceCountedObjectHolder(holder) , iClass ( nullptr )
    {
        GreAutolock ;

        if ( std::is_base_of<Class, Subclass>::value )
            iClass = reinterpret_cast<Class*>(iObject) ;
        else if ( std::is_base_of<Subclass, Class>::value )
            iClass = reinterpret_cast<Class*>(iObject) ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectHolder<Class> & operator = ( const SpecializedCountedObjectHolder<Class> & rhs )
    {
        ReferenceCountedObjectHolder::operator=(rhs);
        iClass = reinterpret_cast<Class*>(iObject);
        return *this ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    bool operator == ( const SpecializedCountedObjectHolder<Class> & rhs ) const
    {
        return iClass == rhs.iClass ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    bool operator < ( const SpecializedCountedObjectHolder < Class > & rhs ) const
    {
        return iClass < rhs.iClass ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual ~SpecializedCountedObjectHolder () noexcept ( false )
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    Class * getObject ()
    {
        GreAutolock ;
        return iClass ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    const Class * getObject () const
    {
        GreAutolock ;
        return iClass ;
    }

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    Class * operator -> ()
    {
        GreAutolock ; return iClass ;
    }

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    const Class * operator -> () const
    {
        GreAutolock ; return iClass ;
    }

    ////////////////////////////////////////////////////////////////////////
    /// @brief Resets the holder.
    ////////////////////////////////////////////////////////////////////////
    void clear ()
    {
        GreAutolock ;
        ReferenceCountedObjectHolder::clear();
        iClass = nullptr ;
    }

protected:

    /// @brief Templated issue.
    Class * iClass ;
};

////////////////////////////////////////////////////////////////////////
/// @brief Non - owning object.
////////////////////////////////////////////////////////////////////////
class ReferenceCountedObjectUser : public Lockable
{
public:

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectUser () ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectUser ( const ReferenceCountedObject* object ) ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectUser ( const ReferenceCountedObjectHolder& holder ) ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectUser ( const ReferenceCountedObjectUser& user ) ;

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual ~ReferenceCountedObjectUser () noexcept ( false ) ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Locks the current object.
    ////////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectHolder lock () ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Locks the current object.
    ////////////////////////////////////////////////////////////////////////
    const ReferenceCountedObjectHolder lock () const ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Returns true if this user contains no object.
    ////////////////////////////////////////////////////////////////////////
    virtual bool isInvalid () const ;

    ////////////////////////////////////////////////////////////////////////
    /// @brief Resets the user.
    ////////////////////////////////////////////////////////////////////////
    virtual void clear () ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    bool operator == ( const ReferenceCountedObjectUser & rhs ) const ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    ReferenceCountedObjectUser & operator = ( const ReferenceCountedObjectUser & rhs ) ;

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    bool operator < ( const ReferenceCountedObjectUser & rhs ) const ;

protected:

    ////////////////////////////////////////////////////////////////////////
    /// @brief Check if the Counter Holder count is valid to update the
    /// 'iObject' property.
    ////////////////////////////////////////////////////////////////////////
    void iCheckCounterValidity () const ;

protected:

    /// @brief Class holded.
    mutable ReferenceCountedObject* iObject ;

    /// @brief Pointer to the Counter.
    mutable ReferenceCounter* iCounter ;
};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
template < typename Class >
class SpecializedCountedObjectUser : public ReferenceCountedObjectUser
{
public:

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectUser () :
    Gre::ReferenceCountedObjectUser()
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectUser ( const Class * object ) :
    ReferenceCountedObjectUser(object)
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectUser ( const SpecializedCountedObjectHolder<Class> & holder ) :
    ReferenceCountedObjectUser(holder)
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectUser ( const SpecializedCountedObjectUser<Class> & user ) :
    ReferenceCountedObjectUser(user)
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    template < typename Subclass >
    SpecializedCountedObjectUser ( const SpecializedCountedObjectUser<Subclass> & user ) :
    Gre::ReferenceCountedObjectUser(user)
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    virtual ~SpecializedCountedObjectUser () noexcept ( false )
    {

    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    SpecializedCountedObjectHolder<Class> lock ()
    {
        GreAutolock ;
        ReferenceCountedObjectHolder holder = ReferenceCountedObjectUser::lock() ;
        return SpecializedCountedObjectHolder<Class> ( reinterpret_cast<Class*>(holder.getObject()) ) ;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    const SpecializedCountedObjectHolder<Class> lock () const
    {
        GreAutolock ;
        ReferenceCountedObjectHolder holder = ReferenceCountedObjectUser::lock() ;
        return SpecializedCountedObjectHolder<Class> ( reinterpret_cast<Class*>(holder.getObject()) ) ;
    }

    //////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////
    bool operator == ( const SpecializedCountedObjectUser<Class> & rhs ) const
    {
        GreAutolock ;
        return ReferenceCountedObjectUser::operator==(rhs) ;
    }
};

GreEndNamespace

#endif /* ReferenceCountedObject_h */
