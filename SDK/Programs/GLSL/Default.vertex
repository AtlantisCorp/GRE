// A basic Vertex shader.
#version 330

#include Programs/GLSL/BaseConstants.glsl

layout(location = 0) in vec3 iPosition ;
layout(location = 1) in vec4 iColor ;
layout(location = 2) in vec3 iNormal ;
layout(location = 3) in vec2 iTexture ;
layout(location = 4) in vec3 iTangent ;
layout(location = 5) in vec3 iBinormal ;

out VertexOutput Fragment ;

void main ()
{
    mat4 ModelViewMatrix = iView * iModel ;
    mat4 ModelViewProjectionMatrix = iProjection * ModelViewMatrix ;
    
    Fragment.color      = iColor ;
    Fragment.position   = vec4( iModel * vec4(iPosition, 1.0f) ).xyz ;
    Fragment.normal     = mat3( transpose(inverse(iModel)) ) * iNormal ;
    Fragment.texcoord   = iTexture ;
    
    if ( material.normalmap_enabled == 1 )
    {
        vec3 T = normalize(vec3(ModelViewMatrix * vec4(iTangent,  0.0)));
        vec3 B = normalize(vec3(ModelViewMatrix * vec4(iBinormal, 0.0)));
        vec3 N = normalize(vec3(ModelViewMatrix * vec4(iNormal,   0.0)));
        Fragment.bumpmapTBN = mat3(T, B, N) ;
    }
    
    gl_Position = ModelViewProjectionMatrix * vec4(iPosition, 1.0) ;
}